{"version":3,"sources":["Component/Alert/Alert.jsx","Component/Navbar/Navbar.jsx","Component/TextForm/TextForm.jsx","Component/App/App.jsx","index.js"],"names":["Alert","props","alert","className","role","type","msg","Navbar","mode","href","id","home","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","color","backgroundColor","myStyle","setmyStyle","Btn","setBtn","text","setText","style","heading","value","onChange","event","target","rows","console","log","NewText","toUpperCase","showAlert","toLowerCase","textCopy","document","getElementById","select","navigator","clipboard","writeText","App","setmode","setalert","message","setTimeout","body","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9c0c7524.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    return (\r\n        \r\n        props.alert && <div className=\"alert alert-warning alert-dismissible fade show\" role=\"alert\">\r\n            {props.alert.type}:{props.alert.msg}\r\n            \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        \r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <a className=\"navbar-brand\" href=\"/\">Dark-Mode</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav mr-auto\">\r\n            <li className=\"nav-item active\">\r\n              <a className=\"nav-link\" href=\"/\">{props.home} <span className=\"sr-only\">(current)</span></a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n            </li>\r\n          </ul>         \r\n          <div className={`custom-control custom-switch text-${props.mode===\"dark\"?\"light\":\"dark\"}`}>\r\n            <input type=\"checkbox\" onClick={props.toggleMode} className=\"custom-control-input\" id=\"customSwitch1\"/>\r\n            <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n}\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [myStyle, setmyStyle] = useState({\r\n        color:'red',\r\n        backgroundColor:'black'\r\n    });\r\n    const onChangeHandleInput=(event)=>{\r\n        setText();\r\n        setText(event.target.value);\r\n    }\r\n    const onClickUPHandleInput=()=>{\r\n        console.log(\"onclickpressed\");\r\n        let NewText=text.toUpperCase();\r\n        setText(NewText);\r\n        props.showAlert(\" Letter succesfully converted to uppercase\",\"Success\");\r\n    }\r\n    const onClickLOWHandleInput=()=>{\r\n        console.log(\"onclickpressed\");\r\n        let NewText=text.toLowerCase();\r\n        setText(NewText);\r\n        props.showAlert(\" Letter succesfully converted to lowercase\",\"Success\");\r\n    }\r\n    const onClickCopy=()=>{\r\n        let textCopy=document.getElementById(\"myBox\");\r\n        textCopy.select();\r\n        navigator.clipboard.writeText(textCopy.value);\r\n        props.showAlert(\" Letter succesfully copied\",\"Success\");\r\n    }\r\n    const [Btn, setBtn] = useState(\"Enable Light Mode\");\r\n    const onClickDarkMode=()=>{\r\n        if(myStyle.color==='red'){\r\n            setmyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtn(\"Enable Dark Mode\");\r\n            props.showAlert(\" Light mode on textarea enabled\",\"Success\");\r\n        }else{\r\n            setmyStyle({\r\n                color:'red',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtn(\"Enable Light Mode\");\r\n            props.showAlert(\" Dark mode on textarea enabled\",\"Success\");\r\n        }\r\n    }\r\n    const [text, setText] = useState(\"Delete and start writing\");\r\n    return (\r\n        <div className=\"container\" style={myStyle}>\r\n            <div className=\"mb-3\" >\r\n                <label htmlFor=\"myBox\" className=\"form-label\">{props.heading}</label>\r\n                <textarea className=\"form-control\" style={myStyle} value={text} onChange={onChangeHandleInput} id=\"myBox\" rows=\"15\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={onClickUPHandleInput}>Cover To UpperCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={onClickLOWHandleInput}>Cover To LowerCase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={onClickDarkMode}>{Btn}</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={onClickCopy}>Copy</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport Alert from '../Alert/Alert';\nimport Navbar from '../Navbar/Navbar';\nimport TextForm from '../TextForm/TextForm';\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  // const [background, setbackground] = useState(\"#042743\");\n  const [alert, setalert] = useState(null);\n  const showAlert=(message,type)=>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n  const toggleMode=()=>{\n    if(mode===\"dark\"){\n      setmode(\"light\");\n      document.body.style.backgroundColor=\"white\";\n      showAlert(\" Light mode enabled\",\"Success\");\n    }else{\n      setmode(\"dark\");\n      document.body.style.backgroundColor=\"#042743\";\n      showAlert(\" Dark mode enabled\",\"Success\");\n    }\n  }\n  return (\n    <>\n      <Navbar home=\"HOME\" mode={mode} toggleMode={toggleMode} aboutText=\"ABOUT\"/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <TextForm showAlert={showAlert} heading=\"Enter the text to analyse\" mode={mode}/>\n      </div>\n  \n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './Component/App/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}